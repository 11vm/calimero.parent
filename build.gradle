buildscript {
	repositories {
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		jcenter()
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.17.0'
	id "com.github.spotbugs" version "1.6.1"
}

ext.desc = 'Calimero multi-project build'

allprojects { proj ->
    repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
		jcenter()
    }

	apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

	ext.desc = 'Calimero - KNX network library'

	group = 'com.github.calimero'
	version = '2.5-SNAPSHOT'
	def packager = 'Calimero Project'
	def projectUrl = "https://github.com/calimero-project/${project.name}"

	sourceCompatibility = 9
	targetCompatibility = 9

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
		from("${projectDir}") {
            include 'LICENSE*'
            into "META-INF"
        }
		from("${projectDir}") {
		    include 'README.md', 'pom.xml', 'build.gradle', 'gradle*/**'
        }
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
		from("${projectDir}") {
            include 'LICENSE*'
            into "META-INF"
        }
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	jar {
		from ('.') {  include 'LICENSE*' into 'META-INF' }
		manifest {
			attributes 'Implementation-Title': "${project.name}",
					   'Implementation-Version': version,
					   'Built-By': "${packager}",
					   'Url': "${projectUrl}"
		}
	}

    task wrapper(type: Wrapper) {
		gradleVersion = '4.7'
    }
    
    bintray {
        user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintray.key') ? project.property('bintray.key') : System.getenv('BINTRAY_KEY')
        publications = ['mavenJava']
        publish = false
        pkg {
            repo = 'calimero'
            name = proj.name
            desc = project.ext.desc
            vcsUrl = "${projectUrl}.git"
            version {
                name = proj.version
                desc = project.ext.desc + ' version ' + project.version
                released  = new Date()
            }
        }
    }

    publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            if (project.tasks.findByName('testJar')) {
                artifact testJar {
                    classifier "tests"
                }
                artifact testSourcesJar {
                    classifier "test-sources"
                }
            }
            groupId group
            artifactId proj.name == 'calimero.parent' ? 'calimero-parent' : proj.name
            version proj.version
            pom.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0 // delete existing content
                builder.append(file("pom.xml").text)
                
                if (project.name != 'calimero.parent') {
                    def root = asNode()
                    root.appendNode('groupId', group)
                    root.appendNode('version', version)
                }
            }
        }
    }
    }
}

subprojects {
	apply plugin: 'com.github.spotbugs'

	ext.junitJupiterVersion = '5.2.0'

	compileJava.options*.compilerArgs = [
		'-Xlint:all',
		'-Xlint:-options',
		'-Werror'
	]

	compileTestJava.options*.compilerArgs = [
		'-Xlint:all',
		'-Xlint:-try',
	]

	compileJava {
		options.debugOptions.debugLevel = "source,lines,vars" // { source, lines, vars } or "none"
//		options.debug = false
	}

	spotbugs {
		toolVersion "3.1.3"
		ignoreFailures = true
//		effort = "max"
		reportLevel = "high"
//		includeFilter = rootProject.file("config/spotbugs/includeFilter.xml")
//		excludeFilter = rootProject.file("config/spotbugs/excludeFilter.xml")
	}
	tasks.withType(com.github.spotbugs.SpotBugsTask) {
		extraArgs '-html:fancy-hist.xsl'
		reports {
			html.enabled = true
			xml.enabled false
		}
	}

	javadoc {
		options.encoding = 'UTF-8'
		options.addStringOption('overview', 'src/overview.html')
		options.addBooleanOption('html5', true)
	}

	test {
		useJUnitPlatform()
		testLogging {
			events "skipped", "failed"
			exceptionFormat "full"
//			showStandardStreams true
		}
	}

	dependencies {
		api 'org.slf4j:slf4j-api:1.8.0-beta2'

		testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
		testCompileOnly 'junit:junit:4.12'
		testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}"
	}
}
