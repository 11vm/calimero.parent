buildscript {
	repositories {
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.15.0'
}

allprojects { proj ->
    repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

	apply plugin: 'java-library'
	apply plugin: 'maven'

	group = 'com.github.calimero'
	version = '2.4-SNAPSHOT'
	def packager = 'Calimero Project'
	def projectUrl = "https://github.com/calimero-project/${project.name}"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	jar {
		from ('.') {  include 'LICENSE*' into 'META-INF' }
		manifest {
			attributes 'Implementation-Title': "${project.name}",
					   'Implementation-Version': version,
					   'Built-By': "${packager}",
					   'Url': "${projectUrl}"
		}
	}

    task wrapper(type: Wrapper) {
		gradleVersion = '4.6'
    }
}

subprojects {
	ext.junitJupiterVersion = '5.2.0-SNAPSHOT'

	compileJava.options*.compilerArgs = [
		'-Xlint:all',
		'-Xlint:-options',
		'-Werror'
	]

	compileTestJava.options*.compilerArgs = [
		'-Xlint:all',
		'-Xlint:-try',
	]

	compileJava {
		options.debugOptions.debugLevel = "source,lines,vars" // { source, lines, vars } or "none"
//		options.debug = false
	}

	javadoc {
		options.encoding = 'UTF-8'
		options.addBooleanOption('html5', true)
	}

	test {
		useJUnitPlatform()
		testLogging {
			events "skipped", "failed"
			exceptionFormat "full"
//			showStandardStreams true
		}
	}

	dependencies {
		api 'org.slf4j:slf4j-api:1.8.0-beta2'

		testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
		testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
		testCompileOnly 'junit:junit:4.12'
		testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}"
	}
}